// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/Stack.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	awscdk "github.com/aws/aws-cdk-go/awscdk/v2"
	cloudassemblyschema "github.com/aws/aws-cdk-go/awscdk/v2/cloudassemblyschema"
	constructs "github.com/aws/constructs-go/constructs/v10"
	gomock "github.com/golang/mock/gomock"
)

// MockStack is a mock of Stack interface.
type MockStack struct {
	ctrl     *gomock.Controller
	recorder *MockStackMockRecorder
}

// MockStackMockRecorder is the mock recorder for MockStack.
type MockStackMockRecorder struct {
	mock *MockStack
}

// NewMockStack creates a new mock instance.
func NewMockStack(ctrl *gomock.Controller) *MockStack {
	mock := &MockStack{ctrl: ctrl}
	mock.recorder = &MockStackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStack) EXPECT() *MockStackMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockStack) Account() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(*string)
	return ret0
}

// Account indicates an expected call of Account.
func (mr *MockStackMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockStack)(nil).Account))
}

// AddDependency mocks base method.
func (m *MockStack) AddDependency(target awscdk.Stack, reason *string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDependency", target, reason)
}

// AddDependency indicates an expected call of AddDependency.
func (mr *MockStackMockRecorder) AddDependency(target, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDependency", reflect.TypeOf((*MockStack)(nil).AddDependency), target, reason)
}

// AddMetadata mocks base method.
func (m *MockStack) AddMetadata(key *string, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMetadata", key, value)
}

// AddMetadata indicates an expected call of AddMetadata.
func (mr *MockStackMockRecorder) AddMetadata(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetadata", reflect.TypeOf((*MockStack)(nil).AddMetadata), key, value)
}

// AddTransform mocks base method.
func (m *MockStack) AddTransform(transform *string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTransform", transform)
}

// AddTransform indicates an expected call of AddTransform.
func (mr *MockStackMockRecorder) AddTransform(transform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransform", reflect.TypeOf((*MockStack)(nil).AddTransform), transform)
}

// AllocateLogicalId mocks base method.
func (m *MockStack) AllocateLogicalId(cfnElement awscdk.CfnElement) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateLogicalId", cfnElement)
	ret0, _ := ret[0].(*string)
	return ret0
}

// AllocateLogicalId indicates an expected call of AllocateLogicalId.
func (mr *MockStackMockRecorder) AllocateLogicalId(cfnElement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateLogicalId", reflect.TypeOf((*MockStack)(nil).AllocateLogicalId), cfnElement)
}

// ArtifactId mocks base method.
func (m *MockStack) ArtifactId() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArtifactId")
	ret0, _ := ret[0].(*string)
	return ret0
}

// ArtifactId indicates an expected call of ArtifactId.
func (mr *MockStackMockRecorder) ArtifactId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArtifactId", reflect.TypeOf((*MockStack)(nil).ArtifactId))
}

// AvailabilityZones mocks base method.
func (m *MockStack) AvailabilityZones() *[]*string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityZones")
	ret0, _ := ret[0].(*[]*string)
	return ret0
}

// AvailabilityZones indicates an expected call of AvailabilityZones.
func (mr *MockStackMockRecorder) AvailabilityZones() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityZones", reflect.TypeOf((*MockStack)(nil).AvailabilityZones))
}

// BundlingRequired mocks base method.
func (m *MockStack) BundlingRequired() *bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BundlingRequired")
	ret0, _ := ret[0].(*bool)
	return ret0
}

// BundlingRequired indicates an expected call of BundlingRequired.
func (mr *MockStackMockRecorder) BundlingRequired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BundlingRequired", reflect.TypeOf((*MockStack)(nil).BundlingRequired))
}

// Dependencies mocks base method.
func (m *MockStack) Dependencies() *[]awscdk.Stack {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dependencies")
	ret0, _ := ret[0].(*[]awscdk.Stack)
	return ret0
}

// Dependencies indicates an expected call of Dependencies.
func (mr *MockStackMockRecorder) Dependencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dependencies", reflect.TypeOf((*MockStack)(nil).Dependencies))
}

// Environment mocks base method.
func (m *MockStack) Environment() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environment")
	ret0, _ := ret[0].(*string)
	return ret0
}

// Environment indicates an expected call of Environment.
func (mr *MockStackMockRecorder) Environment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environment", reflect.TypeOf((*MockStack)(nil).Environment))
}

// ExportStringListValue mocks base method.
func (m *MockStack) ExportStringListValue(exportedValue interface{}, options *awscdk.ExportValueOptions) *[]*string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportStringListValue", exportedValue, options)
	ret0, _ := ret[0].(*[]*string)
	return ret0
}

// ExportStringListValue indicates an expected call of ExportStringListValue.
func (mr *MockStackMockRecorder) ExportStringListValue(exportedValue, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportStringListValue", reflect.TypeOf((*MockStack)(nil).ExportStringListValue), exportedValue, options)
}

// ExportValue mocks base method.
func (m *MockStack) ExportValue(exportedValue interface{}, options *awscdk.ExportValueOptions) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportValue", exportedValue, options)
	ret0, _ := ret[0].(*string)
	return ret0
}

// ExportValue indicates an expected call of ExportValue.
func (mr *MockStackMockRecorder) ExportValue(exportedValue, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportValue", reflect.TypeOf((*MockStack)(nil).ExportValue), exportedValue, options)
}

// FormatArn mocks base method.
func (m *MockStack) FormatArn(components *awscdk.ArnComponents) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatArn", components)
	ret0, _ := ret[0].(*string)
	return ret0
}

// FormatArn indicates an expected call of FormatArn.
func (mr *MockStackMockRecorder) FormatArn(components interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatArn", reflect.TypeOf((*MockStack)(nil).FormatArn), components)
}

// GetLogicalId mocks base method.
func (m *MockStack) GetLogicalId(element awscdk.CfnElement) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalId", element)
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetLogicalId indicates an expected call of GetLogicalId.
func (mr *MockStackMockRecorder) GetLogicalId(element interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalId", reflect.TypeOf((*MockStack)(nil).GetLogicalId), element)
}

// Nested mocks base method.
func (m *MockStack) Nested() *bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nested")
	ret0, _ := ret[0].(*bool)
	return ret0
}

// Nested indicates an expected call of Nested.
func (mr *MockStackMockRecorder) Nested() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nested", reflect.TypeOf((*MockStack)(nil).Nested))
}

// NestedStackParent mocks base method.
func (m *MockStack) NestedStackParent() awscdk.Stack {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NestedStackParent")
	ret0, _ := ret[0].(awscdk.Stack)
	return ret0
}

// NestedStackParent indicates an expected call of NestedStackParent.
func (mr *MockStackMockRecorder) NestedStackParent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NestedStackParent", reflect.TypeOf((*MockStack)(nil).NestedStackParent))
}

// NestedStackResource mocks base method.
func (m *MockStack) NestedStackResource() awscdk.CfnResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NestedStackResource")
	ret0, _ := ret[0].(awscdk.CfnResource)
	return ret0
}

// NestedStackResource indicates an expected call of NestedStackResource.
func (mr *MockStackMockRecorder) NestedStackResource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NestedStackResource", reflect.TypeOf((*MockStack)(nil).NestedStackResource))
}

// Node mocks base method.
func (m *MockStack) Node() constructs.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node")
	ret0, _ := ret[0].(constructs.Node)
	return ret0
}

// Node indicates an expected call of Node.
func (mr *MockStackMockRecorder) Node() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockStack)(nil).Node))
}

// NotificationArns mocks base method.
func (m *MockStack) NotificationArns() *[]*string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationArns")
	ret0, _ := ret[0].(*[]*string)
	return ret0
}

// NotificationArns indicates an expected call of NotificationArns.
func (mr *MockStackMockRecorder) NotificationArns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationArns", reflect.TypeOf((*MockStack)(nil).NotificationArns))
}

// Partition mocks base method.
func (m *MockStack) Partition() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Partition")
	ret0, _ := ret[0].(*string)
	return ret0
}

// Partition indicates an expected call of Partition.
func (mr *MockStackMockRecorder) Partition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Partition", reflect.TypeOf((*MockStack)(nil).Partition))
}

// Region mocks base method.
func (m *MockStack) Region() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Region")
	ret0, _ := ret[0].(*string)
	return ret0
}

// Region indicates an expected call of Region.
func (mr *MockStackMockRecorder) Region() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Region", reflect.TypeOf((*MockStack)(nil).Region))
}

// RegionalFact mocks base method.
func (m *MockStack) RegionalFact(factName, defaultValue *string) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionalFact", factName, defaultValue)
	ret0, _ := ret[0].(*string)
	return ret0
}

// RegionalFact indicates an expected call of RegionalFact.
func (mr *MockStackMockRecorder) RegionalFact(factName, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionalFact", reflect.TypeOf((*MockStack)(nil).RegionalFact), factName, defaultValue)
}

// RenameLogicalId mocks base method.
func (m *MockStack) RenameLogicalId(oldId, newId *string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenameLogicalId", oldId, newId)
}

// RenameLogicalId indicates an expected call of RenameLogicalId.
func (mr *MockStackMockRecorder) RenameLogicalId(oldId, newId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameLogicalId", reflect.TypeOf((*MockStack)(nil).RenameLogicalId), oldId, newId)
}

// ReportMissingContextKey mocks base method.
func (m *MockStack) ReportMissingContextKey(report *cloudassemblyschema.MissingContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportMissingContextKey", report)
}

// ReportMissingContextKey indicates an expected call of ReportMissingContextKey.
func (mr *MockStackMockRecorder) ReportMissingContextKey(report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportMissingContextKey", reflect.TypeOf((*MockStack)(nil).ReportMissingContextKey), report)
}

// Resolve mocks base method.
func (m *MockStack) Resolve(obj interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", obj)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockStackMockRecorder) Resolve(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockStack)(nil).Resolve), obj)
}

// SetTerminationProtection mocks base method.
func (m *MockStack) SetTerminationProtection(val *bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTerminationProtection", val)
}

// SetTerminationProtection indicates an expected call of SetTerminationProtection.
func (mr *MockStackMockRecorder) SetTerminationProtection(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTerminationProtection", reflect.TypeOf((*MockStack)(nil).SetTerminationProtection), val)
}

// SplitArn mocks base method.
func (m *MockStack) SplitArn(arn *string, arnFormat awscdk.ArnFormat) *awscdk.ArnComponents {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitArn", arn, arnFormat)
	ret0, _ := ret[0].(*awscdk.ArnComponents)
	return ret0
}

// SplitArn indicates an expected call of SplitArn.
func (mr *MockStackMockRecorder) SplitArn(arn, arnFormat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitArn", reflect.TypeOf((*MockStack)(nil).SplitArn), arn, arnFormat)
}

// StackId mocks base method.
func (m *MockStack) StackId() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackId")
	ret0, _ := ret[0].(*string)
	return ret0
}

// StackId indicates an expected call of StackId.
func (mr *MockStackMockRecorder) StackId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackId", reflect.TypeOf((*MockStack)(nil).StackId))
}

// StackName mocks base method.
func (m *MockStack) StackName() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackName")
	ret0, _ := ret[0].(*string)
	return ret0
}

// StackName indicates an expected call of StackName.
func (mr *MockStackMockRecorder) StackName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackName", reflect.TypeOf((*MockStack)(nil).StackName))
}

// Synthesizer mocks base method.
func (m *MockStack) Synthesizer() awscdk.IStackSynthesizer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Synthesizer")
	ret0, _ := ret[0].(awscdk.IStackSynthesizer)
	return ret0
}

// Synthesizer indicates an expected call of Synthesizer.
func (mr *MockStackMockRecorder) Synthesizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Synthesizer", reflect.TypeOf((*MockStack)(nil).Synthesizer))
}

// Tags mocks base method.
func (m *MockStack) Tags() awscdk.TagManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].(awscdk.TagManager)
	return ret0
}

// Tags indicates an expected call of Tags.
func (mr *MockStackMockRecorder) Tags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockStack)(nil).Tags))
}

// TemplateFile mocks base method.
func (m *MockStack) TemplateFile() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateFile")
	ret0, _ := ret[0].(*string)
	return ret0
}

// TemplateFile indicates an expected call of TemplateFile.
func (mr *MockStackMockRecorder) TemplateFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateFile", reflect.TypeOf((*MockStack)(nil).TemplateFile))
}

// TemplateOptions mocks base method.
func (m *MockStack) TemplateOptions() awscdk.ITemplateOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateOptions")
	ret0, _ := ret[0].(awscdk.ITemplateOptions)
	return ret0
}

// TemplateOptions indicates an expected call of TemplateOptions.
func (mr *MockStackMockRecorder) TemplateOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateOptions", reflect.TypeOf((*MockStack)(nil).TemplateOptions))
}

// TerminationProtection mocks base method.
func (m *MockStack) TerminationProtection() *bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminationProtection")
	ret0, _ := ret[0].(*bool)
	return ret0
}

// TerminationProtection indicates an expected call of TerminationProtection.
func (mr *MockStackMockRecorder) TerminationProtection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminationProtection", reflect.TypeOf((*MockStack)(nil).TerminationProtection))
}

// ToJsonString mocks base method.
func (m *MockStack) ToJsonString(obj interface{}, space *float64) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToJsonString", obj, space)
	ret0, _ := ret[0].(*string)
	return ret0
}

// ToJsonString indicates an expected call of ToJsonString.
func (mr *MockStackMockRecorder) ToJsonString(obj, space interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToJsonString", reflect.TypeOf((*MockStack)(nil).ToJsonString), obj, space)
}

// ToString mocks base method.
func (m *MockStack) ToString() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToString")
	ret0, _ := ret[0].(*string)
	return ret0
}

// ToString indicates an expected call of ToString.
func (mr *MockStackMockRecorder) ToString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToString", reflect.TypeOf((*MockStack)(nil).ToString))
}

// ToYamlString mocks base method.
func (m *MockStack) ToYamlString(obj interface{}) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYamlString", obj)
	ret0, _ := ret[0].(*string)
	return ret0
}

// ToYamlString indicates an expected call of ToYamlString.
func (mr *MockStackMockRecorder) ToYamlString(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYamlString", reflect.TypeOf((*MockStack)(nil).ToYamlString), obj)
}

// UrlSuffix mocks base method.
func (m *MockStack) UrlSuffix() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UrlSuffix")
	ret0, _ := ret[0].(*string)
	return ret0
}

// UrlSuffix indicates an expected call of UrlSuffix.
func (mr *MockStackMockRecorder) UrlSuffix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UrlSuffix", reflect.TypeOf((*MockStack)(nil).UrlSuffix))
}
