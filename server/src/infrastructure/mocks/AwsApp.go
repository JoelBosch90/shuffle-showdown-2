// Code generated by MockGen. DO NOT EDIT.
// Source: setup.go
//
// Generated by this command:
//
//	mockgen -source=setup.go -destination=mocks/AwsApp.go -package=mocks AwsApp
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	awscdk "github.com/aws/aws-cdk-go/awscdk/v2"
	cxapi "github.com/aws/aws-cdk-go/awscdk/v2/cxapi"
	constructs "github.com/aws/constructs-go/constructs/v10"
	gomock "go.uber.org/mock/gomock"
)

// MockAwsApp is a mock of AwsApp interface.
type MockAwsApp struct {
	ctrl     *gomock.Controller
	recorder *MockAwsAppMockRecorder
	isgomock struct{}
}

// MockAwsAppMockRecorder is the mock recorder for MockAwsApp.
type MockAwsAppMockRecorder struct {
	mock *MockAwsApp
}

// NewMockAwsApp creates a new mock instance.
func NewMockAwsApp(ctrl *gomock.Controller) *MockAwsApp {
	mock := &MockAwsApp{ctrl: ctrl}
	mock.recorder = &MockAwsAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAwsApp) EXPECT() *MockAwsAppMockRecorder {
	return m.recorder
}

// Node mocks base method.
func (m *MockAwsApp) Node() constructs.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node")
	ret0, _ := ret[0].(constructs.Node)
	return ret0
}

// Node indicates an expected call of Node.
func (mr *MockAwsAppMockRecorder) Node() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockAwsApp)(nil).Node))
}

// Synth mocks base method.
func (m *MockAwsApp) Synth(options *awscdk.StageSynthesisOptions) cxapi.CloudAssembly {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Synth", options)
	ret0, _ := ret[0].(cxapi.CloudAssembly)
	return ret0
}

// Synth indicates an expected call of Synth.
func (mr *MockAwsAppMockRecorder) Synth(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Synth", reflect.TypeOf((*MockAwsApp)(nil).Synth), options)
}

// ToString mocks base method.
func (m *MockAwsApp) ToString() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToString")
	ret0, _ := ret[0].(*string)
	return ret0
}

// ToString indicates an expected call of ToString.
func (mr *MockAwsAppMockRecorder) ToString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToString", reflect.TypeOf((*MockAwsApp)(nil).ToString))
}
