// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/RestApi.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	awscdk "github.com/aws/aws-cdk-go/awscdk/v2"
	awsapigateway "github.com/aws/aws-cdk-go/awscdk/v2/awsapigateway"
	awscloudwatch "github.com/aws/aws-cdk-go/awscdk/v2/awscloudwatch"
	constructs "github.com/aws/constructs-go/constructs/v10"
	gomock "github.com/golang/mock/gomock"
)

// MockRestApi is a mock of RestApi interface.
type MockRestApi struct {
	ctrl     *gomock.Controller
	recorder *MockRestApiMockRecorder
}

// MockRestApiMockRecorder is the mock recorder for MockRestApi.
type MockRestApiMockRecorder struct {
	mock *MockRestApi
}

// NewMockRestApi creates a new mock instance.
func NewMockRestApi(ctrl *gomock.Controller) *MockRestApi {
	mock := &MockRestApi{ctrl: ctrl}
	mock.recorder = &MockRestApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestApi) EXPECT() *MockRestApiMockRecorder {
	return m.recorder
}

// AddApiKey mocks base method.
func (m *MockRestApi) AddApiKey(id *string, options *awsapigateway.ApiKeyOptions) awsapigateway.IApiKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApiKey", id, options)
	ret0, _ := ret[0].(awsapigateway.IApiKey)
	return ret0
}

// AddApiKey indicates an expected call of AddApiKey.
func (mr *MockRestApiMockRecorder) AddApiKey(id, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApiKey", reflect.TypeOf((*MockRestApi)(nil).AddApiKey), id, options)
}

// AddDomainName mocks base method.
func (m *MockRestApi) AddDomainName(id *string, options *awsapigateway.DomainNameOptions) awsapigateway.DomainName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDomainName", id, options)
	ret0, _ := ret[0].(awsapigateway.DomainName)
	return ret0
}

// AddDomainName indicates an expected call of AddDomainName.
func (mr *MockRestApiMockRecorder) AddDomainName(id, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDomainName", reflect.TypeOf((*MockRestApi)(nil).AddDomainName), id, options)
}

// AddGatewayResponse mocks base method.
func (m *MockRestApi) AddGatewayResponse(id *string, options *awsapigateway.GatewayResponseOptions) awsapigateway.GatewayResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGatewayResponse", id, options)
	ret0, _ := ret[0].(awsapigateway.GatewayResponse)
	return ret0
}

// AddGatewayResponse indicates an expected call of AddGatewayResponse.
func (mr *MockRestApiMockRecorder) AddGatewayResponse(id, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGatewayResponse", reflect.TypeOf((*MockRestApi)(nil).AddGatewayResponse), id, options)
}

// AddModel mocks base method.
func (m *MockRestApi) AddModel(id *string, props *awsapigateway.ModelOptions) awsapigateway.Model {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddModel", id, props)
	ret0, _ := ret[0].(awsapigateway.Model)
	return ret0
}

// AddModel indicates an expected call of AddModel.
func (mr *MockRestApiMockRecorder) AddModel(id, props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddModel", reflect.TypeOf((*MockRestApi)(nil).AddModel), id, props)
}

// AddRequestValidator mocks base method.
func (m *MockRestApi) AddRequestValidator(id *string, props *awsapigateway.RequestValidatorOptions) awsapigateway.RequestValidator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRequestValidator", id, props)
	ret0, _ := ret[0].(awsapigateway.RequestValidator)
	return ret0
}

// AddRequestValidator indicates an expected call of AddRequestValidator.
func (mr *MockRestApiMockRecorder) AddRequestValidator(id, props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequestValidator", reflect.TypeOf((*MockRestApi)(nil).AddRequestValidator), id, props)
}

// AddUsagePlan mocks base method.
func (m *MockRestApi) AddUsagePlan(id *string, props *awsapigateway.UsagePlanProps) awsapigateway.UsagePlan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUsagePlan", id, props)
	ret0, _ := ret[0].(awsapigateway.UsagePlan)
	return ret0
}

// AddUsagePlan indicates an expected call of AddUsagePlan.
func (mr *MockRestApiMockRecorder) AddUsagePlan(id, props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsagePlan", reflect.TypeOf((*MockRestApi)(nil).AddUsagePlan), id, props)
}

// ApplyRemovalPolicy mocks base method.
func (m *MockRestApi) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyRemovalPolicy", policy)
}

// ApplyRemovalPolicy indicates an expected call of ApplyRemovalPolicy.
func (mr *MockRestApiMockRecorder) ApplyRemovalPolicy(policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyRemovalPolicy", reflect.TypeOf((*MockRestApi)(nil).ApplyRemovalPolicy), policy)
}

// ArnForExecuteApi mocks base method.
func (m *MockRestApi) ArnForExecuteApi(method, path, stage *string) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArnForExecuteApi", method, path, stage)
	ret0, _ := ret[0].(*string)
	return ret0
}

// ArnForExecuteApi indicates an expected call of ArnForExecuteApi.
func (mr *MockRestApiMockRecorder) ArnForExecuteApi(method, path, stage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArnForExecuteApi", reflect.TypeOf((*MockRestApi)(nil).ArnForExecuteApi), method, path, stage)
}

// CloudWatchAccount mocks base method.
func (m *MockRestApi) CloudWatchAccount() awsapigateway.CfnAccount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudWatchAccount")
	ret0, _ := ret[0].(awsapigateway.CfnAccount)
	return ret0
}

// CloudWatchAccount indicates an expected call of CloudWatchAccount.
func (mr *MockRestApiMockRecorder) CloudWatchAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudWatchAccount", reflect.TypeOf((*MockRestApi)(nil).CloudWatchAccount))
}

// DeploymentStage mocks base method.
func (m *MockRestApi) DeploymentStage() awsapigateway.Stage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeploymentStage")
	ret0, _ := ret[0].(awsapigateway.Stage)
	return ret0
}

// DeploymentStage indicates an expected call of DeploymentStage.
func (mr *MockRestApiMockRecorder) DeploymentStage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentStage", reflect.TypeOf((*MockRestApi)(nil).DeploymentStage))
}

// DomainName mocks base method.
func (m *MockRestApi) DomainName() awsapigateway.DomainName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainName")
	ret0, _ := ret[0].(awsapigateway.DomainName)
	return ret0
}

// DomainName indicates an expected call of DomainName.
func (mr *MockRestApiMockRecorder) DomainName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainName", reflect.TypeOf((*MockRestApi)(nil).DomainName))
}

// Env mocks base method.
func (m *MockRestApi) Env() *awscdk.ResourceEnvironment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Env")
	ret0, _ := ret[0].(*awscdk.ResourceEnvironment)
	return ret0
}

// Env indicates an expected call of Env.
func (mr *MockRestApiMockRecorder) Env() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Env", reflect.TypeOf((*MockRestApi)(nil).Env))
}

// GeneratePhysicalName mocks base method.
func (m *MockRestApi) GeneratePhysicalName() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePhysicalName")
	ret0, _ := ret[0].(*string)
	return ret0
}

// GeneratePhysicalName indicates an expected call of GeneratePhysicalName.
func (mr *MockRestApiMockRecorder) GeneratePhysicalName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePhysicalName", reflect.TypeOf((*MockRestApi)(nil).GeneratePhysicalName))
}

// GetResourceArnAttribute mocks base method.
func (m *MockRestApi) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceArnAttribute", arnAttr, arnComponents)
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetResourceArnAttribute indicates an expected call of GetResourceArnAttribute.
func (mr *MockRestApiMockRecorder) GetResourceArnAttribute(arnAttr, arnComponents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceArnAttribute", reflect.TypeOf((*MockRestApi)(nil).GetResourceArnAttribute), arnAttr, arnComponents)
}

// GetResourceNameAttribute mocks base method.
func (m *MockRestApi) GetResourceNameAttribute(nameAttr *string) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceNameAttribute", nameAttr)
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetResourceNameAttribute indicates an expected call of GetResourceNameAttribute.
func (mr *MockRestApiMockRecorder) GetResourceNameAttribute(nameAttr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceNameAttribute", reflect.TypeOf((*MockRestApi)(nil).GetResourceNameAttribute), nameAttr)
}

// LatestDeployment mocks base method.
func (m *MockRestApi) LatestDeployment() awsapigateway.Deployment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestDeployment")
	ret0, _ := ret[0].(awsapigateway.Deployment)
	return ret0
}

// LatestDeployment indicates an expected call of LatestDeployment.
func (mr *MockRestApiMockRecorder) LatestDeployment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestDeployment", reflect.TypeOf((*MockRestApi)(nil).LatestDeployment))
}

// Methods mocks base method.
func (m *MockRestApi) Methods() *[]awsapigateway.Method {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Methods")
	ret0, _ := ret[0].(*[]awsapigateway.Method)
	return ret0
}

// Methods indicates an expected call of Methods.
func (mr *MockRestApiMockRecorder) Methods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Methods", reflect.TypeOf((*MockRestApi)(nil).Methods))
}

// Metric mocks base method.
func (m *MockRestApi) Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metric", metricName, props)
	ret0, _ := ret[0].(awscloudwatch.Metric)
	return ret0
}

// Metric indicates an expected call of Metric.
func (mr *MockRestApiMockRecorder) Metric(metricName, props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metric", reflect.TypeOf((*MockRestApi)(nil).Metric), metricName, props)
}

// MetricCacheHitCount mocks base method.
func (m *MockRestApi) MetricCacheHitCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricCacheHitCount", props)
	ret0, _ := ret[0].(awscloudwatch.Metric)
	return ret0
}

// MetricCacheHitCount indicates an expected call of MetricCacheHitCount.
func (mr *MockRestApiMockRecorder) MetricCacheHitCount(props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricCacheHitCount", reflect.TypeOf((*MockRestApi)(nil).MetricCacheHitCount), props)
}

// MetricCacheMissCount mocks base method.
func (m *MockRestApi) MetricCacheMissCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricCacheMissCount", props)
	ret0, _ := ret[0].(awscloudwatch.Metric)
	return ret0
}

// MetricCacheMissCount indicates an expected call of MetricCacheMissCount.
func (mr *MockRestApiMockRecorder) MetricCacheMissCount(props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricCacheMissCount", reflect.TypeOf((*MockRestApi)(nil).MetricCacheMissCount), props)
}

// MetricClientError mocks base method.
func (m *MockRestApi) MetricClientError(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricClientError", props)
	ret0, _ := ret[0].(awscloudwatch.Metric)
	return ret0
}

// MetricClientError indicates an expected call of MetricClientError.
func (mr *MockRestApiMockRecorder) MetricClientError(props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricClientError", reflect.TypeOf((*MockRestApi)(nil).MetricClientError), props)
}

// MetricCount mocks base method.
func (m *MockRestApi) MetricCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricCount", props)
	ret0, _ := ret[0].(awscloudwatch.Metric)
	return ret0
}

// MetricCount indicates an expected call of MetricCount.
func (mr *MockRestApiMockRecorder) MetricCount(props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricCount", reflect.TypeOf((*MockRestApi)(nil).MetricCount), props)
}

// MetricIntegrationLatency mocks base method.
func (m *MockRestApi) MetricIntegrationLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricIntegrationLatency", props)
	ret0, _ := ret[0].(awscloudwatch.Metric)
	return ret0
}

// MetricIntegrationLatency indicates an expected call of MetricIntegrationLatency.
func (mr *MockRestApiMockRecorder) MetricIntegrationLatency(props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricIntegrationLatency", reflect.TypeOf((*MockRestApi)(nil).MetricIntegrationLatency), props)
}

// MetricLatency mocks base method.
func (m *MockRestApi) MetricLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricLatency", props)
	ret0, _ := ret[0].(awscloudwatch.Metric)
	return ret0
}

// MetricLatency indicates an expected call of MetricLatency.
func (mr *MockRestApiMockRecorder) MetricLatency(props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricLatency", reflect.TypeOf((*MockRestApi)(nil).MetricLatency), props)
}

// MetricServerError mocks base method.
func (m *MockRestApi) MetricServerError(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricServerError", props)
	ret0, _ := ret[0].(awscloudwatch.Metric)
	return ret0
}

// MetricServerError indicates an expected call of MetricServerError.
func (mr *MockRestApiMockRecorder) MetricServerError(props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricServerError", reflect.TypeOf((*MockRestApi)(nil).MetricServerError), props)
}

// Node mocks base method.
func (m *MockRestApi) Node() constructs.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node")
	ret0, _ := ret[0].(constructs.Node)
	return ret0
}

// Node indicates an expected call of Node.
func (mr *MockRestApiMockRecorder) Node() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockRestApi)(nil).Node))
}

// PhysicalName mocks base method.
func (m *MockRestApi) PhysicalName() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalName")
	ret0, _ := ret[0].(*string)
	return ret0
}

// PhysicalName indicates an expected call of PhysicalName.
func (mr *MockRestApiMockRecorder) PhysicalName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalName", reflect.TypeOf((*MockRestApi)(nil).PhysicalName))
}

// RestApiId mocks base method.
func (m *MockRestApi) RestApiId() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestApiId")
	ret0, _ := ret[0].(*string)
	return ret0
}

// RestApiId indicates an expected call of RestApiId.
func (mr *MockRestApiMockRecorder) RestApiId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestApiId", reflect.TypeOf((*MockRestApi)(nil).RestApiId))
}

// RestApiName mocks base method.
func (m *MockRestApi) RestApiName() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestApiName")
	ret0, _ := ret[0].(*string)
	return ret0
}

// RestApiName indicates an expected call of RestApiName.
func (mr *MockRestApiMockRecorder) RestApiName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestApiName", reflect.TypeOf((*MockRestApi)(nil).RestApiName))
}

// RestApiRootResourceId mocks base method.
func (m *MockRestApi) RestApiRootResourceId() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestApiRootResourceId")
	ret0, _ := ret[0].(*string)
	return ret0
}

// RestApiRootResourceId indicates an expected call of RestApiRootResourceId.
func (mr *MockRestApiMockRecorder) RestApiRootResourceId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestApiRootResourceId", reflect.TypeOf((*MockRestApi)(nil).RestApiRootResourceId))
}

// Root mocks base method.
func (m *MockRestApi) Root() awsapigateway.IResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].(awsapigateway.IResource)
	return ret0
}

// Root indicates an expected call of Root.
func (mr *MockRestApiMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockRestApi)(nil).Root))
}

// SetCloudWatchAccount mocks base method.
func (m *MockRestApi) SetCloudWatchAccount(val awsapigateway.CfnAccount) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCloudWatchAccount", val)
}

// SetCloudWatchAccount indicates an expected call of SetCloudWatchAccount.
func (mr *MockRestApiMockRecorder) SetCloudWatchAccount(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCloudWatchAccount", reflect.TypeOf((*MockRestApi)(nil).SetCloudWatchAccount), val)
}

// SetDeploymentStage mocks base method.
func (m *MockRestApi) SetDeploymentStage(d awsapigateway.Stage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeploymentStage", d)
}

// SetDeploymentStage indicates an expected call of SetDeploymentStage.
func (mr *MockRestApiMockRecorder) SetDeploymentStage(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeploymentStage", reflect.TypeOf((*MockRestApi)(nil).SetDeploymentStage), d)
}

// Stack mocks base method.
func (m *MockRestApi) Stack() awscdk.Stack {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stack")
	ret0, _ := ret[0].(awscdk.Stack)
	return ret0
}

// Stack indicates an expected call of Stack.
func (mr *MockRestApiMockRecorder) Stack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stack", reflect.TypeOf((*MockRestApi)(nil).Stack))
}

// ToString mocks base method.
func (m *MockRestApi) ToString() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToString")
	ret0, _ := ret[0].(*string)
	return ret0
}

// ToString indicates an expected call of ToString.
func (mr *MockRestApiMockRecorder) ToString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToString", reflect.TypeOf((*MockRestApi)(nil).ToString))
}

// Url mocks base method.
func (m *MockRestApi) Url() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Url")
	ret0, _ := ret[0].(*string)
	return ret0
}

// Url indicates an expected call of Url.
func (mr *MockRestApiMockRecorder) Url() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Url", reflect.TypeOf((*MockRestApi)(nil).Url))
}

// UrlForPath mocks base method.
func (m *MockRestApi) UrlForPath(path *string) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UrlForPath", path)
	ret0, _ := ret[0].(*string)
	return ret0
}

// UrlForPath indicates an expected call of UrlForPath.
func (mr *MockRestApiMockRecorder) UrlForPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UrlForPath", reflect.TypeOf((*MockRestApi)(nil).UrlForPath), path)
}
