# This workflow triggers when code is added to the production branch.
# It runs tests for all components on a clean ubuntu image.
# If tests pass, the code is deployed to the production environment.

name: Test and Deploy

on:
  push:
    branches: [ "production" ]
  pull_request:
    branches: [ "production" ]

env:
  AWS_REGION : "eu-west-1"
  
permissions:
  id-token: write
  contents: read

jobs:
  test-client:
    runs-on: ubuntu-latest
    container: node:22-bullseye
    steps:
    - uses: actions/checkout@v4
    - run: ./commands.sh build client
    - run: ./commands.sh test client

  test-server:
    runs-on: ubuntu-latest
    container: node:22-bullseye # AWS CDK uses a JSII layer that requires Node.js
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        cache: false
        go-version-file: 'server/infrastructure/go.mod'
    - run: ./commands.sh build server
    - run: ./commands.sh test server

  deploy-client:
    runs-on: ubuntu-latest
    container: node:22-bullseye
    needs: [ test-client, test-server ]
    steps:
    - uses: actions/checkout@v4
    - run: ./commands.sh build client
    - run: npm install -g aws-cdk
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::522814730241:role/github-actions-deployment-role
        role-session-name: GitHubActionsDeployment-${{ github.run_id }}
        aws-region: eu-central-1
    - run: ./commands.sh deploy client

  deploy-server:
    runs-on: ubuntu-latest
    container: node:22-bullseye  # AWS CDK uses a JSII layer that requires Node.js
    needs: [ test-client, test-server ]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        cache: false
        go-version-file: 'server/infrastructure/go.mod'
    - run: ./commands.sh build server
    - run: npm install -g aws-cdk
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::522814730241:role/github-actions-deployment-role
        role-session-name: GitHubActionsDeployment-${{ github.run_id }}
        aws-region: eu-central-1
    - run: ./commands.sh deploy server
